/**
 * @overview
 * The base class for platform specific build commands. This ensures some
 * commonality between build commands so that hooks can consistently
 * access build properties.
 *
 * @copyright
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 *
 * @license
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

var appc = require('node-appc'),
	fs = require('fs'),
	path = require('path'),
	ti = require('titanium-sdk'),
	fileLoggerRegistered = false;

/**
 * The base class for platform specific build commands. This ensures some
 * commonality between build commands so that hooks can consistently
 * access build properties.
 *
 * General usage is to extend the Builder class and override the config(),
 * validate(), and run() methods:
 *
 * var Builder = require('titanium-sdk/lib/builder');
 * var util = require('util');
 *
 * function AndroidBuilder() {
 *     Builder.apply(this, arguments);
 * }
 *
 * util.inherits(AndroidBuilder, Builder);
 *
 * AndroidBuilder.prototype.config = function config(logger, config, cli) {
 *     Builder.prototype.config.apply(this, arguments);
 *     // TODO
 * };
 *
 * AndroidBuilder.prototype.validate = function validate() {
 *     // TODO
 * };
 *
 * AndroidBuilder.prototype.run = function run(logger, config, cli, finished) {
 *     Builder.prototype.run.apply(this, arguments);
 *     // TODO
 *     finished();
 * };
 *
 * @module lib/builder
 */

module.exports = Builder;

/**
 * Constructs the build state. This needs to be explicitly called from the
 * derived builder's constructor.
 * @class
 * @classdesc Base class for all build states.
 * @constructor
 * @param {Module} The "module" variable from the build command file
 */
function Builder(buildModule) {
	this.titaniumSdkPath = (function scan(dir) {
		var file = path.join(dir, 'manifest.json');
		if (fs.existsSync(file)) {
			return dir;
		}
		dir = path.dirname(dir);
		return dir != '/' && scan(dir);
	}(__dirname));

	this.titaniumSdkName = path.basename(this.titaniumSdkPath);

	this.titaniumSdkVersion = ti.manifest.version;

	this.platformPath = (function scan(dir) {
		var file = path.join(dir, 'package.json');
		if (fs.existsSync(file)) {
			return dir;
		}
		dir = path.dirname(dir);
		return dir != '/' && scan(dir);
	}(path.dirname(buildModule.filename)));

	this.platformName = path.basename(this.platformPath);

	this.globalModulesPath = path.join(this.titaniumSdkPath, '..', '..', 'modules');

	this.packageJson = require(path.join(this.platformPath, 'package.json'));

	this.conf = {};
}

/**
 * Defines common variables prior to running the build's config(). This super
 * function should be called prior to the platform-specific build command's config().
 * It overrides the logger to add file logging for just the build command.
 * @param {Object} logger - The logger instance
 * @param {Object} config - The CLI config
 * @param {Object} cli - The CLI instance
 */
Builder.prototype.config = function config(logger, config, cli) {
	if(!fileLoggerRegistered) {
		fileLoggerRegistered = true;
		var origLoggerLog = logger.log,
			platform = (cli.argv.p==='ios') ? 'iphone' : cli.argv.p,
			logFilePath = require('path').join(path.resolve('.'), 'build'),
			logFile = require('path').join(logFilePath, 'build_'+platform+'.log');
		// make sure build dir exists
		require('wrench').mkdirSyncRecursive(logFilePath, 0755);
		// create our write stream
		logFileStream = require('fs').createWriteStream(logFile, { 'flags': 'a', 'encoding': 'ascii' });
		// write the banner to start out the log
		logFileStream.write(logBanner(cli));
		// override the existing log function
		logger.log = function() {
			// most of this copied from the CLI's logger.js logger.log() function
			var args = Array.prototype.slice.call(arguments),
				padLevels = logger.padLevels,
				prefix;

			// if there are no args (i.e. a blank line), we need at least one space
			args.length || args.unshift(' ');

			// if we're not being called from info/warn/error/debug, then set this as a general log entry
			args[0] in logger.levels || args.unshift('_');

			// turn off padding
			logger.padLevels = args[0] != '_';

			// get rid of any null args
			while (args.length && args[args.length-1] == null) args.pop();

			// if we're logging an error, we need to cast to a string so that sprintf doesn't complain
			if (args[1] instanceof Error || Object.prototype.toString.call(args[1]) == '[object Error]') {
				args[1] = (args[1].stack || args[1].toString()) + '\n';
			} else if (args[1] == null || args[1] == undefined) {
				args[1] = '';
			}

			typeof type != 'string' && (args[1] = ''+args[1]);

			// strip off starting full colons
			args[1] = args[1].replace(/:\s{1}/, ' ');

			// add [INFO] type prefixes for each line
			prefix = (args[0] != "_") ? "[" + args[0].toUpperCase() + "]" + ((args[0].length===5) ? '  ' : '   ') : "";

			// log it to our log file, stripping out the color codes
			logFileStream.write("\n" + prefix + args[1].replace(/\x1B\[\d+m/g, ''));

			// call the original logger with our cleaned up args
			origLoggerLog.apply(logger, [args[0], args.length > 2 ? sprintf.apply(null, args.slice(1)) : args[1]]);

			// restore padding
			logger.padLevels = padLevels;

			return logger;
		}
	}
	this.logger = logger;
	this.config = config;
	this.cli = cli;
};

/**
 * Validation stub function. Meant to be overwritten.
 */
Builder.prototype.validate = function validate() {
};

/**
 * Defines common variables prior to running the build. This super function
 * should be called prior to the platform-specific build command's run().
 *
 * @param {Object} logger - The logger instance
 * @param {Object} config - The CLI config
 * @param {Object} cli - The CLI instance
 * @param {Function} finished - A function to call after the function finishes
 */
Builder.prototype.run = function run(logger, config, cli, finished) {
	this.tiapp = cli.tiapp;
	this.projectDir = cli.argv['project-dir'];
	this.buildDir = path.join(this.projectDir, 'build', this.platformName);

	// QUESTION: should we call finished()?
};

/**
* Outputs environment details at the top of the log file
* for each run of `titanium build`
*/
function logBanner(cli) {
	return "\n\n---------------------------------\n\n" +
		(new Date()).toLocaleString() + "\n\n" +
		"Build Environment \n" +
		"   Platform   = " + ((cli.argv.p==='ios') ? 'iphone' : cli.argv.p) + "\n"  +
		"   CLI ver    = " + cli.version + "\n"  +
		"   SDK ver    = " + cli.argv.sdk + "\n" +
		"   SDK path   = " + cli.sdk.path + "\n" +
		"   Node ver   = " + process.version + "\n" +
		"   Command    = " + cli.argv.$ + ' ' + cli.argv.$_.join(' ') + "\n" +
		"\n";
}