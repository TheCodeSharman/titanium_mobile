/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ${packageName};

import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.KrollConverter;
import org.appcelerator.kroll.KrollInvocation;
import org.appcelerator.kroll.KrollMethod;
import org.appcelerator.kroll.KrollProxyBinding;
import org.appcelerator.kroll.KrollProperty;
import org.appcelerator.kroll.KrollReflectionProperty;
import org.appcelerator.kroll.util.KrollReflectionUtils;

import org.mozilla.javascript.Scriptable;

import ${packageName}.${proxyClassName};

<#function countRequiredArguments method>
	<#local count = 0>
	<#list method["args"] as arg>
		<#if arg?keys?seq_contains("optional")>
			<#if !arg["optional"]>
				<#local count = count + 1>
			</#if>
		<#else>
			<#local count = count + 1>
		</#if>
	</#list>
	<#return count>
</#function>

/* WARNING: this code is generated for binding methods in Android */
public class ${genClassName} implements KrollProxyBinding
{
	public void bind(final Scriptable scope, final KrollProxy rootObject, final KrollProxy p) {
		
		final ${proxyClassName} proxy = (${proxyClassName}) p;
		<#if proxyAnnotation.annotationType == "org.appcelerator.kroll.annotations.Kroll.module">
		<#assign moduleName = proxyClassName?substring(0, proxyClassName?index_of("Module"))>
		try {
			rootObject.set(scope, "${moduleName}", p);
		} catch (NoSuchFieldException e) {}
		</#if>
		
		//// Constants
		<#if constants?keys?size &gt; 0>
		try {
		</#if>
		<#list constants?keys as constantName>
			<#assign constant = constants[constantName]>
			proxy.set(scope, "${constantName}", ${proxyClassName}.${constant.proxyName});
		</#list>
		<#if constants?keys?size &gt; 0>
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		}
		</#if>
		
		<#if properties?keys?size &gt; 0>
		//// Properties ("static binding")
		try {
		</#if>
		<#list properties?keys as propertyName>
			<#assign property = properties[propertyName]>
			proxy.set(scope, "${propertyName}", new KrollProperty(p, "${propertyName}", ${property.get?string}, ${property.set?string}, "${property.proxyName}"));
		</#list>
		<#if properties?keys?size &gt; 0>
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		}
		</#if>
		
		<#if dynamicProperties?keys?size &gt; 0>
		//// Dynamic Properties
		try {
		</#if>
		<#list dynamicProperties?keys as propertyName>
			<#assign dynamicProperty = dynamicProperties[propertyName]>
			proxy.set(scope, "${propertyName}", new KrollReflectionProperty(p, "${propertyName}",
				${dynamicProperty.get?string}, ${dynamicProperty.set?string},
				<#if dynamicProperty.get>
				"${dynamicProperty.getMethodName}",
				<#else>
				null,
				</#if>
				<#if dynamicProperty.set>
				"${dynamicProperty.setMethodName}"
				<#else>
				null
				</#if>
			));
		</#list>
		<#if dynamicProperties?keys?size &gt; 0>
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		}
		</#if>
		
		//// Methods
		<#list methods?keys as methodName>
			<#assign method = methods[methodName]>
			<#if method.returnType != "void">
			final ${method.converter.name} __${methodName}_converter = ${method.converter.name}.getInstance();
			</#if>
		KrollMethod ${methodName}_method = new KrollMethod("${methodName}") {
			public Object invoke(KrollInvocation invocation, Object[] args)
			{
				<#assign requiredArgs = countRequiredArguments(method)>
				<#if requiredArgs &gt; 0>
				if (args == null) { throw new IllegalArgumentException("Expected ${requiredArgs} arguments for ${methodName}, got 0"); }
				else if (args.length < ${requiredArgs}) { throw new IllegalArgumentException("Expected ${requiredArgs} arguments for ${methodName}, got " + args.length); }
				</#if>
				
				<#list method.args as arg>
					// ${arg["type"]} ${arg["name"]}
					${arg["type"]} ${arg["name"]};
					<#assign optional = arg?keys?seq_contains("optional") && arg["optional"]>
					<#assign converter = arg["converter"].name>
					<#if optional>
					if (args.length >= ${arg_index+1}) {
					</#if>
						${arg["name"]} = (${arg["type"]})
							${converter}.getInstance().convertJavascript(invocation, args[${arg_index}]);
					<#if optional>
					} else {
						${arg["name"]} = ${arg["defaultValueProvider"]}.getInstance().getDefaultValue(
							${arg["type"]}.class);
					}
					</#if>
				</#list>
				<#if method.returnType != "void">
				${method.returnType} __retVal =
				</#if>
					proxy.${methodName}(invocation<#list method.args as arg>, ${arg.name}</#list>);
				<#if method.returnType != "void">
				Object __${methodName}_converted = __${methodName}_converter.convertNative(invocation, __retVal);
				
				
				<#if method.annotation.annotationType == "org.appcelerator.kroll.annotations.Kroll.createMethod">
				// TODO: also check that __retVal is a proxy
				__retVal.bind(scope, rootObject);
				</#if>
				return __${methodName}_converted;
				<#else>
				;
				return KrollProxy.UNDEFINED;
				</#if>
			}
		};
		
		try {
			proxy.set(scope, "${methodName}", ${methodName}_method);
		} catch (NoSuchFieldException ex) {/* there shouldn't be a dynamic field here */}
		</#list>
	}
}