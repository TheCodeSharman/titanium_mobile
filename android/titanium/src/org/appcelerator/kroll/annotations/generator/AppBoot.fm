/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

package ${appPackage};

import java.io.File;
import java.io.FileReader;
import java.util.HashMap;

import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.KrollProxyBinding;
import org.appcelerator.kroll.KrollRootObject;
import org.appcelerator.kroll.KrollBindings;
import org.appcelerator.kroll.KrollObject;

import org.mozilla.javascript.ScriptableObject;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.Context;

public class ${appName}Boot implements KrollBindings
{
	protected HashMap<Class<? extends KrollProxy>, KrollProxyBinding> bindings =
		new HashMap<Class<? extends KrollProxy>, KrollProxyBinding>();
	
	public void initBindings(Scriptable scope, KrollProxy proxy) {
		<#list proxies as proxy>
		bindings.put(${proxy}.class, new ${proxy}Binding());
		</#list>
		
		<#list modules?keys as moduleName>
			<#assign moduleType = modules[moduleName]>
			${moduleType} ${moduleName}_module = new ${moduleType}();
			bindings.get(${moduleType}.class).bind(scope, proxy, ${moduleName}_module);
		</#list>
	}
	
	public KrollProxyBinding getBinding(Class<? extends KrollProxy> proxyClass) {
		return bindings.get(proxyClass);
	}
	
	public KrollProxyBinding getBinding(KrollProxy proxy) {
		return getBinding(proxy.getClass());
	}
	
	public static void main (String args[]) throws Exception {
		
		try {
			Context c = Context.enter();
			Scriptable scope = c.initStandardObjects();
			
			File source = new File("js/app.js");
			FileReader reader = new FileReader(source);

			${appName}Boot boot = new ${appName}Boot();
			KrollProxy.bindings = boot;
			
			KrollObject ti = new KrollObject(new KrollRootObject());
			boot.initBindings(scope, ti.getProxy());
			
			ScriptableObject.putProperty(scope, "Ti", ti);
			
			Object wrappedOut = Context.javaToJS(System.out, scope);
			ScriptableObject.putProperty(scope, "out", wrappedOut);
			
			c.evaluateReader(scope, reader, source.getName(), 1, null);
		} finally {
			Context.exit();
		}
	}
 }