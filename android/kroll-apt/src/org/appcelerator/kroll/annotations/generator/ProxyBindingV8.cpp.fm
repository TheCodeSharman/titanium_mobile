/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2011 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

/** This code is generated, do not edit by hand. **/
<#import "ProxyBinding.fm" as Proxy>

#include "${packageName}.${proxyClassName}.h"

#include "JNIUtil.h"

using namespace v8;

namespace titanium {

// JNI class reference for the KrollProxy in Java for this native proxy.
jclass ${proxyClassName}::javaClass = JNIUtil::getJNIEnv()->FindClass("${packageName?replace('.','/')}/${proxyClassName}");

${proxyClassName}::${proxyClassName}(jobject javaObject) : NativeObject(javaObject)
{
}

void ${proxyClassName}::Initialize(Handle<Object> ti)
{
	HandleScope scope;
}

Handle<Value> ${proxyClassName}::Constructor(const Arguments& args)
{
	<#-- TODO: validate and convert arguments to jvalue array -->

	<#-- TODO: Call constructor on Java class for the type we are proxying -->

	<#-- Create proxy object and wrap into the V8 Object's internal field -->
	${proxyClassName}* proxy = new ${proxyClassName};
	proxy->Wrap(args.Holder());

	return args.This();
}

// Methods ---------------------------------------------------------------
<@Proxy.listMethods ; isFirst, name, method, signature>
static jmethodID ${name}_methodID = JNIUtil::getJNIEnv()->GetMethodID(${proxyClassName}::javaClass, "${name}", "${signature}");

Handle<Value> ${proxyClassName}::${name}(const Arguments& args)
{
	<@Proxy.verifyAndConvertArguments method.args />
	<@Proxy.callJNIMethod method.returnType, "${name}_methodID", "${proxyClassName}::javaClass", "jArguments" ;
		hasResult, resultVar>
	<#if hasResult>
	return ${resultVar}
	<#else>
	return v8::Undefined();
	</#if>
	</@Proxy.callJNIMethod>
}

</@Proxy.listMethods>

} // namespace titanium

