/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2011 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

/** This code is generated, do not edit by hand. **/
<#import "ProxyBinding.fm" as Proxy>

#include "${proxyClassName}.h"

#include "JNIUtil.h"

using namespace v8;

namespace titanium {

// JNI class reference for the KrollProxy in Java for this native proxy.
jclass ${proxyClassName}::javaClass = JNIUtil::getJNIEnv()->FindClass("${packageName?replace('.','/')}/${proxyClassName}");

void ${proxyClassName}::Initialize(Handle<Object> ti)
{
	HandleScope scope;
}

Handle<Value> ${proxyClassName}::Constructor(const Arguments& args)
{
	ProxyClass* proxy = new ProxyClass;
	proxy->Wrap(args.Holder());

	return args.This();
}

// Methods ---------------------------------------------------------------
<@Proxy.listMethods ; isFirst, name, method, signature, hasArgs>
static jmethodID ${name}_methodID = JNIUtil::getJNIEnv()->GetMethodID(${proxyClassName}::javaClass, "${name}", "${signature}");

Handle<Value> ${proxyClassName}::${name}(const Arguments& args)
{
	<#-- If method has arguments, verify and convert them. -->
	<#if hasArgs>
	<@Proxy.getRequiredArgumentCount args=method.args ; requiredCount>
	<#if requiredCount &gt; 0>
	if (args.Length() != ${requiredCount})
		JSException::MissingRequiredArguments(args.Length(), ${requiredCount});
	</#if>
	</@Proxy.getRequiredArgumentCount>

	jvalue jniArgs[${method.args?size}];

	<@Proxy.listMethodArguments args=method.args ; index, info>
	Local<Value> arg = args[${index}];
	if (!arg->Is${info.jsType}()) {
			JSException::InvalidArgument(${index}, ${info.jsType});
			return;
	}
	jniArgs[${index}].${info.jvalue} = TypeConverter::${info.jsToJavaConverter}(arg->To${info.jsType}());
	</@Proxy.listMethodArguments>

	</#if>
	<#-- Generate JNI Call  -->
	<@Proxy.generateJNICall returnType=method.returnType ; resultType, callMethod>
	<#if resultType == "void">
	${callMethod}(javaObject, ${name}_methodID, <#if hasArgs>jniArgs<#else>0</#if>);
	<#else>
	${resultType} result = ${callMethod}(javaObject, ${name}_methodID, <#if hasArgs>jniArgs<#else>0</#if>);
	return TypeConverter::${Proxy.getTypeInfo(method.returnType).javaToJsConverter}(result);
	</#if>
	</@Proxy.generateJNICall>
}

</@Proxy.listMethods>

} // namespace titanium

