/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ${packageName};

import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.KrollConverter;
import org.appcelerator.kroll.KrollInvocation;
import org.appcelerator.kroll.KrollMethod;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxyBinding;
import org.appcelerator.kroll.KrollModuleBinding;
import org.appcelerator.kroll.KrollDynamicProperty;
import org.appcelerator.kroll.KrollReflectionProperty;
import org.appcelerator.kroll.KrollInjector;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollDefaultValueProvider;
import org.appcelerator.kroll.util.KrollReflectionUtils;
import org.appcelerator.titanium.kroll.KrollBridge;
import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;

import org.mozilla.javascript.Scriptable;

import java.util.HashMap;

import ${packageName}.${proxyClassName};

<#function countRequiredArguments args>
	<#local count = 0>
	<#list args as arg>
		<#if arg?keys?seq_contains("optional")>
			<#if !arg.optional>
				<#local count = count + 1>
			</#if>
		<#elseif arg.type = "java.lang.Object[]">
			<#break>
		<#else>
			<#local count = count + 1>
		</#if>
	</#list>
	<#return count>
</#function>

<#macro injectByType type proxy value>
	<#if injectMethods??>
		<#list injectMethods as injectMethod>
			<#if injectMethod.type = type>
			KrollInjector.injectValueIntoMethod(${proxy}, "${injectMethod.name}", ${value});
			</#if>
		</#list>
	</#if>
	<#if injectFields??>
		<#list injectFields as injectField>
			<#if injectField.type = type>
			KrollInjector.injectValueIntoField(${proxy}, "${injectField.name}", ${value});
			</#if>
		</#list>
	</#if>
</#macro>

<#macro generateMethodCall methodName args returnType converter hasInvocation hasArgArray firstArgValue returnUndefinedForVoid>
	<#local varArgsIndex = -1>
	<#list args as arg>
		<#if arg.type == "java.lang.Object[]">
			<#local varArgsIndex = arg_index>
		</#if>
	</#list>
	
	<#if hasArgArray>
		<#local requiredArgs = countRequiredArguments(args)>
		<#if requiredArgs &gt; 0>
	if (__args == null) { throw new IllegalArgumentException("Expected ${requiredArgs} arguments for ${methodName}, got 0"); }
	else if (__args.length < ${requiredArgs}) { throw new IllegalArgumentException("Expected ${requiredArgs} arguments for ${methodName}, got " + __args.length); }
		</#if>
	</#if>
	<#if returnType != "void">
	final ${converter} __${methodName}_converter = ${converter}.getInstance();
	</#if>
	<#list args as arg>
		${arg.type} ${arg.name};
		<#if arg_index = varArgsIndex>
			<#if hasArgArray>
				// varargs
				${arg.name} = new Object[__args.length-${arg_index}];
				for (int i = ${arg_index}; i < __args.length; i++) {
					${arg.name}[i-${arg_index}] = ${arg.converter}.getInstance().convertJavascript(__invocation, __args[i], Object.class);
				}
			<#else>
				${arg.name} = (Object[]) ${converter}.getInstance().convertJavascript(__invocation, ${firstArgValue}, Object[].class);
			</#if>
		<#else>
			<#local optional = arg?keys?seq_contains("optional") && arg.optional>
			<#local castType = arg.type>
			<#if primitiveBoxTypes?keys?seq_contains(arg.type)>
				<#local castType = primitiveBoxTypes[arg.type]>
			</#if>
			<#if optional && hasArgArray>
			if (__args.length >= ${arg_index+1}) {
			</#if>
			
			<#local argNeedsConvert = true>
			<#if hasArgArray>
				<#local argValue = "__args[" + arg_index + "]">
			<#else>
				<#if arg_index == 0 && !optional>
					<#local argValue = firstArgValue>
				<#else>
					<#local argNeedsConvert = false>
					<#local argValue = arg.converter + ".getInstance().getDefaultValue(" + castType + ".class)">
				</#if>
			</#if>
			<#if argNeedsConvert>
				${arg.name} = (${castType})
					${arg.converter}.getInstance().convertJavascript(__invocation, ${argValue}, ${castType}.class);
			<#else>
				${arg.name} = (${castType})
					${arg.defaultValueProvider}.getInstance().getDefaultValue(${castType}.class);
			</#if>
			<#if optional && hasArgArray>
			} else {
				${arg.name} = (${castType})
					${arg.defaultValueProvider}.getInstance().getDefaultValue(${castType}.class);
			}
			</#if>
		</#if>
	</#list>
	
	<#-- TODO: re-enable injection
	<@injectByType type="org.appcelerator.kroll.KrollInvocation" proxy="__proxy" value="__invocation"-->
	
	<#if returnType != "void">
	${returnType} __retVal =
	</#if>
	
	
	((${proxyClassName}) __invocation.getProxy()).${methodName}(
		<#if hasInvocation>
		__invocation
		<#if args?size &gt; 0>,</#if>
		</#if>
		<#list args as arg>
		${arg.name}<#if arg_has_next>,</#if>
		</#list>);
	<#if returnType != "void">
	return __${methodName}_converter.convertNative(__invocation, __retVal);
	<#else>
	<#if returnUndefinedForVoid>
		return KrollProxy.UNDEFINED;
	</#if>
	</#if>
</#macro>

<#macro listCreateProxies>
	<#if isModule>
		<#list allModules?keys as module>
			<#if module = packageName+"."+proxyClassName>
				<#if allModules[module].createProxies??>
					<#list allModules[module].createProxies as createProxy>
						<#nested createProxy_index==0, createProxy>
					</#list>
				</#if>
			</#if>
		</#list>
	</#if>
</#macro>

<#macro listChildModules>
	<#if isModule>
		<#list allModules?keys as module>
			<#if module = packageName+"."+proxyClassName>
				<#if allModules[module].childModules??>
					<#list allModules[module].childModules as childModule>
						<#nested childModule_index==0, childModule>
					</#list>
				</#if>
			</#if>
		</#list>
	</#if>
</#macro>

<#macro listConstants>
	<#if constants??>
		<#list constants?keys as constantName>
			<#local constant = constants[constantName]>
			<#nested constantName_index==0, constantName, constant>
		</#list>
	</#if>
</#macro>

<#macro listProperties>
	<#if properties??>
		<#list properties?keys as propertyName>
			<#local property = properties[propertyName]>
			<#nested propertyName_index==0, propertyName, property>
		</#list>
	</#if>
</#macro>

<#macro listDynamicProperties>
	<#if dynamicProperties??>
		<#list dynamicProperties?keys as propertyName>
			<#local dynamicProperty = dynamicProperties[propertyName]>
			<#nested propertyName_index==0, propertyName, dynamicProperty>
		</#list>
	</#if>
</#macro>

<#macro listMethods>
	<#if methods??>
		<#list methods?keys as methodName>
			<#local method = methods[methodName]>
			<#nested methodName_index==0, methodName, method>
		</#list>
	</#if>
</#macro>

<#assign primitiveBoxTypes = {"int":"Integer", "double":"Double", "float":"Float", "long":"Long", "boolean":"Boolean", "short":"Short", "byte":"Byte"}>

/* WARNING: this code is generated for binding methods in Android */
public class ${genClassName}
<#if superProxyBindingClassName??>
	extends ${superProxyBindingClassName}
<#else>
	<#-- even proxies need to extend module binding so we can preserve KrollProxy delegation -->
	extends KrollModuleBinding
</#if>
{
	private static final String TAG = "${genClassName}";
	
	public ${genClassName}() {
		<#if superProxyBindingClassName??>super();</#if>
		<@listCreateProxies ; isFirst, createProxy>
		bindings.put("create${createProxy.name}", null);
		</@listCreateProxies>
		<@listChildModules ; isFirst, childModule>
		bindings.put("${childModule.name}", null);
		</@listChildModules>
		<@listConstants ; isFirst, name, constant>
		bindings.put("${name}", null);
		</@listConstants>
		<@listProperties ; isFirst, name, property>
		bindings.put("${name}", null);
		</@listProperties>
		<@listDynamicProperties ; isFirst, name, property>
		bindings.put("${name}", null);
		</@listDynamicProperties>
		<@listMethods ; isFirst, name, method>
		bindings.put("${name}", null);
		</@listMethods>
		<#list proxyAttrs.propertyAccessors as accessor>
			<#assign upperCamel = accessor?substring(0, 1)?upper_case + accessor?substring(1)>
		bindings.put("get${upperCamel}", null);
		bindings.put("set${upperCamel}", null);
		</#list>
		
	}
	
	public void bindContextSpecific(KrollBridge bridge, KrollProxy proxy) {
		<#if proxyAttrs.isTopLevel>
		<#list proxyAttrs.topLevelNames as topLevelName>
		bridge.bindToTopLevel("${topLevelName}", proxy);
		</#list>
		</#if>
		<#if topLevelMethods??>
			<#list topLevelMethods?keys as methodName>
				<#list topLevelMethods[methodName] as topLevelName>
		bridge.bindToTopLevel("${topLevelName}", proxy.getBoundMethodForThis("${methodName}"));
				</#list>
			</#list>
		</#if>
	}
	
	<#if superProxyBindingClassName??>@Override</#if>
	public Object getBinding(String name) {
		Object value = bindings.get(name);
		if (value != null) { 
			return value;
		}
		
		<@listCreateProxies ; isFirst, createProxy>
		<#if isFirst>// Proxy create methods</#if>
		if (name.equals("create${createProxy.name}")) {
			KrollMethod create${createProxy.name} = new KrollMethod("create${createProxy.name}") {
				public Object invoke(KrollInvocation __invocation, Object[] __args) throws Exception
				{
					${createProxy.proxyClassName} __createdProxy = new ${createProxy.proxyClassName}(__invocation.getTiContext());
					
					Object __createArgs[] = new Object[__args.length];
					for (int i = 0; i < __args.length; i++) {
						__createArgs[i] = KrollConverter.getInstance().convertJavascript(
							__invocation, __args[i], Object.class);
					}
					
					__createdProxy.handleCreationArgs(__createArgs);
					return KrollConverter.getInstance().convertNative(__invocation, __createdProxy);
				}
			};
			bindings.put("create${createProxy.name}", create${createProxy.name});
			return create${createProxy.name};
		}
		</@listCreateProxies>
		
		<@listChildModules ; isFirst, childModule>
		<#if isFirst>// Child modules</#if>
		if (name.equals("${childModule.name}")) {
			KrollModule ${childModule.name}_module = new ${childModule.proxyClassName}(TiContext.getCurrentTiContext());
			bindings.put("${childModule.name}", ${childModule.name}_module);
			return ${childModule.name}_module;
		}
		</@listChildModules>
		
		<@listConstants ; isFirst, name, constant>
		<#if isFirst>// Constants</#if>
		if (name.equals("${name}")) {
			bindings.put("${name}", ${proxyClassName}.${constant.proxyName});
			return ${proxyClassName}.${constant.proxyName};
		}
		</@listConstants>
		
		<@listProperties ; isFirst, name, property>
		<#if isFirst>// Properties</#if>
		if (name.equals("${name}")) {
			KrollReflectionProperty ${name}_property = new KrollReflectionProperty("${name}",
				${property.get?string}, ${property.set?string}, "${property.proxyName}");
			${name}_property.setJavascriptConverter(${property.javascriptConverter}.getInstance());
			${name}_property.setNativeConverter(${property.nativeConverter}.getInstance());
			bindings.put("${name}", ${name}_property);
			return ${name}_property;
		}
		</@listProperties>
		
		<@listDynamicProperties ; isFirst, name, property>
		<#if isFirst>// Dynamic Properties</#if>
		if (name.equals("${name}")) {
			KrollDynamicProperty ${name}_property = new KrollDynamicProperty("${name}",
				${property.get?string}, ${property.set?string},
				<#if property.set>${property.retain?string}<#else>false</#if>) {
				
				@Override
				public Object dynamicGet(KrollInvocation __invocation) {
					<#if property.get>
						<@generateMethodCall methodName=property.getMethodName args=property.getMethodArgs
							returnType=property.getReturnType converter=property.nativeConverter
							hasInvocation=property.getHasInvocation hasArgArray=false firstArgValue="none" returnUndefinedForVoid=true />
					<#else>
					Log.w(TAG, "Property ${proxyAttrs.name}.${name} isn't readable");
					return KrollProxy.UNDEFINED;
					</#if>
				}
				
				@Override
				public void dynamicSet(KrollInvocation __invocation, Object __value) {
					<#if property.set>
						<@generateMethodCall methodName=property.setMethodName args=property.setMethodArgs
							returnType="void" converter=property.javascriptConverter
							hasInvocation=property.setHasInvocation hasArgArray=false firstArgValue="__value" returnUndefinedForVoid=false />
					<#else>
					Log.w(TAG, "Property ${proxyAttrs.name}.${name} isn't writable");
					</#if>
				}
			};
			<#if property.runOnUiThread>
			${name}_property.setRunOnUiThread(true);
			</#if>
			${name}_property.setJavascriptConverter(${property.javascriptConverter}.getInstance());
			${name}_property.setNativeConverter(${property.nativeConverter}.getInstance());
			bindings.put("${name}", ${name}_property);
			return ${name}_property;
		}
		</@listDynamicProperties>
		
		<@listMethods ; isFirst, name, method>
		<#if isFirst>// Methods</#if>
		if (name.equals("${method.apiName}")) {
			KrollMethod ${method.apiName}_method = new KrollMethod("${method.apiName}") {
				public Object invoke(KrollInvocation __invocation, Object[] __args) throws Exception
				{
					<@generateMethodCall methodName=name args=method.args returnType=method.returnType
						converter=method.converter hasInvocation=method.hasInvocation
						hasArgArray=true firstArgValue="none" returnUndefinedForVoid=true/>
				}
			};
			<#if method.runOnUiThread>
			${method.apiName}_method.setRunOnUiThread(true);
			</#if>
			bindings.put("${method.apiName}", ${method.apiName}_method);
			return ${method.apiName}_method;
		}
		</@listMethods>
		
		<#list proxyAttrs.propertyAccessors as accessor>
		<#assign upperCamel = accessor?substring(0, 1)?upper_case + accessor?substring(1)>
		if (name.equals("get${upperCamel}") || name.equals("set${upperCamel}")) {
			KrollMethod ${accessor}_accessor = new KrollMethod("${accessor}") {
				public Object invoke(KrollInvocation __invocation, Object[] __args) throws Exception
				{
					String name = __invocation.getMethod(). 	getName(); 
					if (name.startsWith("get") || name.startsWith("is")) {
						return KrollConverter.getInstance().convertNative(__invocation,
							__invocation.getProxy().getProperty("${accessor}"));
					} else {
						__invocation.getProxy().setProperty("${accessor}", __args.length > 0 ?
							KrollConverter.getInstance().convertJavascript(__invocation, __args[0], Object.class) : null, true);
					}
					return KrollProxy.UNDEFINED;
				}
			};
			
			
			bindings.put("get${upperCamel}", ${accessor}_accessor);
			bindings.put("set${upperCamel}", ${accessor}_accessor);
			return ${accessor}_accessor;
		}
		</#list>
		
		<#if proxyClassName != "KrollProxy">
			return super.getBinding(name);
		<#else>
			return null;
		</#if>
	}
	
	private static final String SHORT_API_NAME = "${proxyAttrs.name}";
	private static final String FULL_API_NAME = "${proxyAttrs.fullAPIName}";
	private static final String ID = "${proxyAttrs.id}";
	
	public String getAPIName() {
		return FULL_API_NAME;
	}
		
	public String getShortAPIName() {
		return SHORT_API_NAME;
	}
	
	public String getId() {
		return ID;
	}
}