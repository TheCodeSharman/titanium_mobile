<#macro getRequiredArgumentCount args>
	<#local count = 0>
	<#list args as arg>
		<#if arg?keys?seq_contains("optional")>
			<#if !arg.optional>
				<#local count = count + 1>
			</#if>
		<#elseif arg.type = "java.lang.Object[]">
			<#break>
		<#else>
			<#local count = count + 1>
		</#if>
	</#list>
	<#nested count>
</#macro>

<#macro listMethods>
	<#if methods??>
		<#list methods?keys as methodName>
			<#local method = methods[methodName]>
			<#nested methodName_index==0, methodName, method>
		</#list>
	</#if>
</#macro>

<#assign typeInfo = {
	"java.lang.String":{
		"jsType":"String",
		"converter":"jsStringToJavaString",
		"jvalue":"l"
	},
	"java.lang.Object":{
		"jsType":"Object",
		"converter":"jsObjectToJavaObject",
		"jvalue":"l"
	},
	"int":{
		"jsType":"Number",
		"converter":"jsNumberToJavaInt",
		"jvalue":"i"
	},
	"short":{
		"jsType":"Number",
		"converter":"jsNumberToJavaShort",
		"jvalue":"s"
	},
	"long":{
		"jsType":"Number",
		"converter":"jsNumberToJavaLong",
		"jvalue":"j"
	},
	"float":{
		"jsType":"Number",
		"converter":"jsNumberToJavaFloat",
		"jvalue":"f"
	},
	"double":{
		"jsType":"Number",
		"converter":"jsNumberToDouble",
		"jvalue":"d"
	},
	"bool":{
		"jsType":"Boolean",
		"converter":"jsBooleanToJavaBoolean",
		"jvalue":"z"
	}
}>

<#macro listMethodArguments args>
	<#list args as arg>
		<#nested arg_index, typeInfo[arg.type]!typeInfo["java.lang.Object"]>
	</#list>
</#macro>

