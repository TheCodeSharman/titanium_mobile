---
name: Titanium.UI.iOS.PreviewContext
summary: |
    A PreviewContext provides options to configure the iOS9 3D-Touch feature "Peek and Pop".
description: |
    The PreviewContext is created by the <Titanium.UI.iOS.createPreviewContext> method.

    Use this class to configure the previewing context which is displayed while "peeking" a view.

    Note: This feature required iOS9 and a 3D-Touch capabile device (such as iPhone 6S or iPhone 6S Plus).
    To check the current device support, use <Ti.UI.iOS.forceTouchSupported> and consider to use the longpress
    event to provide a fallback to your users.

    See also:

    *  [Official 3D-Touch docs by Apple](https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html)

platforms: [iphone]
since: "5.1.0"
extends: Titanium.Proxy
osver: {ios: {min: "9.0"}}

properties:
  - name: window
    summary: The preview window.
    description: |
        Provides the preview for "peeking" and which will be be opened after "popping".
    type: Titanium.UI.Window
    optional: false

  - name: actions
    summary: The preview actions and preview action groups.
    description: |
        Provides an array with elements of the type [Titanium.UI.iOS.PreviewAction](Titanium.UI.iOS.PreviewAction)
        and [Ti.UI.iOS.PreviewActionGroup](Titanium.UI.iOS.PreviewActionGroup). Both can be used together.
    type: Array<Titanium.UI.iOS.PreviewAction>
    optional: true

  - name: contentHeight
    summary: The height of the window preview.
    description: |
        Specified the height of the preview which will be shown during "peeking".
    type: Number
    optional: true
    default: The available height of the screen.

examples:
  - title: PreviewContext example
    example: |
        In the example below, we create a new preview context, assign a `window`, `actions` and a `contentHeight`.
        After that, we assign the preview context to a view which will trigger the "peeking" of it. Note, that this
        is independent from the click event of the view itself.

            var win = Ti.UI.createWindow({
                backgroundColor: "white"
            });
            var actions = [],

            // The window to be previewed after peeking and shown after popping.
            var detailWindow = Ti.UI.createWindow({
                backgroundColor: "blue"
            });

            // The actions to be added to the preview context.
            var action = Ti.UI.iOS.createPreviewAction({
                title: "Preview Action",
                style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT
            });

            action.addEventListener("click", function(e) {
                alert("Title: "+e.title+" / Style: "+e.style+" / Index: "+e.index);
            });

            var subAction = Ti.UI.iOS.createPreviewAction({
                title: "Previw Subaction"
            })

            subAction.addEventListener("click", function(e) {
                alert("Title: "+e.title+" / Style: "+e.style+" / Index: "+e.index);
            });

            var actionGroup = Ti.UI.iOS.createPreviewActionGroup({
                title: "More actions...",
                style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DESTRUCTIVE,
                actions: [subAction]
            });

            actions.push(action);
            actions.push(actionGroup);

            // Create the preview context
            var context = Ti.UI.iOS.createPreviewContext({
                window: detailWindow,
                actions: actions,
            	contentHeight: 300
            });

            // Assign the preview context
            var button = Ti.UI.createButton({
                previewContext: context,
                title : "Open Window!",
                backgroundColor: "#A6171C",
                width: 200,
                height: 50,
                tintColor: "#fff"
            });

            win.add(button);
            win.open();

