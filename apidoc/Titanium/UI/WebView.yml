---
name: Titanium.UI.WebView
summary: |
    The web view allows you to open an HTML5 based view which can load either local or remote content. 
description: |
    The web view content can be any valid web content such as HTML, PDF, SVG or other WebKit supported 
    content types. 

    JavaScript in the web view executes in its own context. When running local web content
    (that is, content that is included in the application's resources), scripts have
    access to the Titanium namespace. In particular, when running local web content:
    
    - You can use <Titanium.App.addEventListener> and
      <Titanium.App.fireEvent> to receive and send application-level events.

    - Events can be logged using the <Titanium.API> logging methods. 

    Scripts downloaded from remote web servers cannot access the Titanium namespace,
    however, you can use the web view [evalJS](Titanium.UI.WebView.evalJS) method 
    to execute a JavaScript expression inside the web view, and retrieve the value 
    of an expression.
    
    Use the <Titanium.UI.createWebView> method to create a web view.

    Web views are more expensive to create than other native views because of the requirement to
    load the HTML browser into memory.
    
    The native web view handles scrolling and other related touch events internally.
    you cannot have both Titanium style events against the 
    web view instance and internal JavaScript events in the DOM.  You must choose between one or the other.

    #### Android Platform Implementation Notes

    The Android web view supports native plugins such as Flash Player. To use plugin
    content, you must set the [pluginState](Titanium.UI.WebView.pluginState) property to
    either [WEBVIEW_PLUGINS_ON](Titanium.UI.Android.WEBVIEW_PLUGINS_ON) or 
    [WEBVIEW_PLUGINS_ON_DEMAND](Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND).

    You must also call [pause](Titanium.UI.WebView.pause) when the current activity is
    paused, to prevent plugin content from continuing to run in the background. Call
    [resume](Titanium.UI.WebView.resume) when the current activity is resumed. You can
    do this by adding listeners for the [Activity.pause](Titanium.Android.Activity.pause)
    and [Activity.resume](Titanium.Android.Activity.resume) events.
extends: Titanium.UI.View
since: "0.8"
methods:

  - name: setHtml
    summary: Sets the value of [html](Titanium.UI.WebView.html) property.
    description: |
      In iOS, there are additional parameters `baseURL` and `mimeType` that can be used to configure
      the WebView main content presentation. For example:
              
          setHtml('<html><body>Hello, <a href="/documentation">Titanium</a>!</body></html>',
                  {baseURL:'http://developer.appcelerator.com/'})
    parameters:

      - name: html
        summary: New HTML to display in the web view.
        type: Object

      - name: baseURL
        summary: The base URL for the content. Only used by iOS.
        optional: true
        type: String

      - name: mimeType
        summary: The MIME type of the content. Only used by iOS.
        optional: true
        type: String
        default: 'text/html'

  - name: canGoBack
    summary: Returns `true` if the web view can go back in history.
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean

  - name: canGoForward
    summary: Returns `true` if the webview can go forward in history
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean

  - name: evalJS
    summary: |
        Evaluates a JavaScript expression inside the context of the web view and
        optionally, returns a result.
    description: |
        The JavaScript expression must be passed in as a string. If you are passing in any objects,
        you must serialize them to strings using [JSON.stringify](Globals.JSON.stringify).

        The `evalJS` method returns a string representing the value of the expression. For
        example, the following call retrieves the `document.title` element from the
        document currently loaded into the web view.
        
            var docTitle = myWebView.evalJS('document.title');

        It is not necessary to include `return` in the JavaScript. In fact, the following
        call returns the empty string:

            myWebView.evalJS('return document.title');

        For Mobile Web, you can only execute JavaScript when the contents are on the same domain.
    returns:
        type: String
    parameters:

      - name: content
        summary: JavaScript code as a string. The code will be evaluated inside the web view context.
        type: String

  - name: goBack
    summary: Goes back one entry in the web view's history list, to the previous page.
    description: |
        For Mobile Web, you can only go back for same domain pages. If you set the initial `url` to a 
        remote page, the back function will not work. If you load a local page, then the user navigates 
        away to a remote page, you cannot go back.

  - name: goForward
    summary: Goes forward one entry in this web view's history list, if possible.
    description: |
        For Mobile Web, you can only go forward for same domain pages. If you set the initial `url` 
        to a remote page, the forward function will not work.

  - name: pause
    summary: Pauses native webview plugins. 
    description: |
        Add a `pause` handler to your <Titanium.UI.Android.Activity> and invoke
        this method to pause native plugins. This is important with Flash content 
        as it will continue in the background unless this method is invoked.

        Call [resume](Titanium.UI.WebView.resume) to unpause native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: reload
    summary: Reloads the current webpage.
    description: |
        For Mobile Web, when you reload, the last visited same domain page or the original `url` 
        is the page that is reloaded.

        You may need to simply reset the `url` property to reinitialize the WebView's iframe. 
        Reloading the web view will reset the history.

  - name: repaint
    summary: Forces the web view to repaint its contents.
    platforms: [iphone, ipad]

  - name: resume
    summary: Resume native webview plugins. 
    description: |
        Used to unpause native plugins after calling [pause](Titanium.UI.WebView.pause).

        Add a `resume` handler to your <Titanium.UI.Android.Activity> and invoke
        this method to resume native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: setBasicAuthentication
    summary: |
        Sets the basic authentication for this web view to use on subsequent URl requests.
    platforms: [android, iphone, ipad]
    parameters:

      - name: username
        summary: Basic auth username.
        type: String

      - name: password
        summary: Basic auth password.
        type: String

  - name: stopLoading
    summary: stop loading a currently loading page
    description: |
        For Mobile Web, due to browser permissions, this will issue a stop on all windows including 
        the parent and all other WebViews.  Generally, this feature does not work reliably and instead 
        you may choose to set the `hardStop` argument to true.
    parameters:
      - name: hardStop
        summary: Forces the WebView to destroy the iFrame (Mobile Web only).
        type: Boolean

events:

  - name: beforeload
    summary: Fired before the web view starts loading its content.
    description: |
        For Mobile Web, if you pass the `url` into the constructor, you must attach the event listener 
        before adding the web view to its parent, otherwise the event will fire before you have a 
        chance to add the event listener.
        
        This event does not fire when navigating remote web pages.
    properties:
      - name: url
        summary: URL of the web document being loaded.

  - name: error
    summary: Fired when the web view cannot load the content. 
    description: |
        For Mobile Web, generally this event will **not** fire, even for 404, 500, and invalid URLs.
    properties:
      - name: url
        summary: URL of the web document.

  - name: load
    summary: Fired when the web view content is loaded.
    description: |
        For Mobile Web, the `url` returned in the load event is generally accurate when loading 
        same domain pages and remote pages that you explicitly set using the `url` property. 
        If you navigate to a remote page, then this `url` is set to the initial remote page's URL.
    properties:
      - name: url
        summary: URL of the web document. 

properties:

  - name: data
    summary: Data blob or file that is used to load the web document.
    description: |
        The content identified by `data` is 
        For Mobile Web, setting new content will reset the `url` and the WebView's history.
    type: [Titanium.Blob, Titanium.Filesystem.File]

  - name: html
    summary: HTML content of the web document.
    description: |
        For Mobile Web, setting new content will reset the `url` and the WebView's history.
    type: String

  - name: loading
    summary: Indicates if the webview is loading content.
    type: Boolean

  - name: pluginState
    summary: Determines how to treat content that requires plugins in this web view.
    description: |
        This setting affects the loading of content that requires web plugins, such as
        Flash Player.
        
        Accepts one of <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>, 
        <Titanium.UI.Android.WEBVIEW_PLUGINS_ON>, or <Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND>.

            <android ...>
                <tool-api-level>11</tool-api-level>
                <manifest>
                    <application android:hardwareAccelerated="true"/>
                </manifest>
            </android>


        See Android documentation for 
        [WebSettings.PluginState](http://developer.android.com/reference/android/webkit/WebSettings.PluginState.html). 
        
        Only works on Android devices at API Level 8 or greater.
    type: Number
    platforms: [android]
    since: "1.8.0"
    default: <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>

  - name: showScrollbars
    summary: If `true`, scrollbars are displayed if content is larger than the web view.
    type: Boolean
    platforms: [mobileweb]
    since: "1.9.0"
    default: true

  - name: enableZoomControls
    summary: If `true`, zoom controls are enabled.
    type: Boolean
    platforms: [android]
    since: "1.8.0"
    default: true

  - name: scalesPageToFit
    summary: If `true`, scale contents to fit the web view.
    description: |
        On iOS, setting this to `true` sets the initial zoom level to show the entire
        page, and enables the user to zoom the web view in and out. Setting this to 
        `false` prevents the user from zooming the web view.

        On Android, only controls the initial zoom level.

    platforms: [android, iphone, ipad]
    type: Boolean
    default: |
        `false` when content is specified as a local URL, `true` for any other kind of
        content (remote URL, `Blob`, or `File`).

  - name: url
    summary: the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
    type: String

  - name: userAgent
    summary: The User-Agent header used by the web view when requesting content.
    type: String
    default: System default user-agent value.
    platforms: [android]

  - name: willHandleTouches
    summary: Explicitly specifies if this webview handles touches.
    description: |
        On the iOS platform, the web view will intercept **all** touch events if this web view or any of its 
        parent views have touch listeners. This makes interaction with native web view components impossible.

        Set this flag to `false` to disable the default behavior. Setting this property to `false` 
        allows the user to interact with the native webview and still honor any `touch` events sent to 
        its parents. No `touch` events will be generated when the user interacts with the web view itself.
    type: Boolean
    platforms: [iphone, ipad]
    since: "1.9.0"
    default: true

examples:
  - title: Basic Web View to external URL example
    example: |
        Create a web view to a remote URL and open the window as modal.
        
            	var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
            	var window = Titanium.UI.createWindow();
            	window.add(webview);
            	window.open({modal:true});
        
        
