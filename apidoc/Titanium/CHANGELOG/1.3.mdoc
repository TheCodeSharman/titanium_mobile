Titanium Mobile 1.3.0 - 5/6/2010
=================================

This release includes general bug fixes and enhancements for Android and iPhone.  
Please see the updated [Titanium Mobile Reference Documentation for 1.3](/apidoc/mobile/1.3).

### Bug Fixes

### Enhancements

### New Features

### API Changes

- Titanium.Filesystem.applicationSupportDirectory (currently, only iPhone)
- Titanium.UI.DashboardView (currently, only iPhone)
- backgroundGradient property on all Titanium Views (currently, only iPhone)
- Titanium.Media.defaultAudioSession was added
- audioSessionMode property added for Titanium.Media.AudioPlayer, Titanium.Media.AudioRecord and Titanium.Media.Sound.
- Titanium.Database.ResultSet now supports fieldName property
- view layouts now support horizontal layout (currently, only iPhone)
- 'default' is an allowable color 

### Known Issues

#### iPhone

We've found performance issues related to using rounded borders on views in a Table View row
on older model phones.  We will attempt to provide a better performance fix for the border drawing
code in a near future release. 

If you're using a multi-version install of XCode, Titanium may not pick up the correct version of XCode. Titanium will use the XCode install under the system default (`/Developer`).

If you're using a customized build location configuration setting in XCode, Titanium will refuse to build your project and will log an error in the Titanium Developer console. A work around is to turn of customized build locations and rebuild.

#### Android

Titanium requires Android SDK Tools version 5 or better with platform 1.6/API Level 4 installed. It also requires JDK 6 (aka 1.6).

### Notes

The following are miscellaneous platform specific notes related to 1.3.

#### iPhone and iPad

Starting with this release and going forward, we now support a fully-generated XCode project and all the generated source code for Titanium bindings are available in source form in the project.  The source is generated into the folder `PROJECT_DIR/build/iphone/Classes`.  Note, that during simulator mode, all source code is compiled once to create a bootstrap application build and subsequent launches will run your code in interpreted mode to speed launching of the application in the simulator.  When you do a build for device or package for distribution, your code will be compiled and generated code will be conditionally compiled and dependencies resolved at that time, reducing the final size of your application for release.

It must be noted that the source generated into the Classes directory generally should not be modified - at least not unless you know what you're doing and have a plan for migrating and maintaining changes. Titanium will generate the source upon 2 main conditions: (a) if you change the version of your SDK for a project inside Titanium Developer (or in the file named `project.xcconfig`) or (b) if no source exists (for example, when migrating from 1.2 to 1.3).  All generated code is stable during development for the same version, generally speaking.  Some files are still generated each time your application is compiled, but for the most part, we create a definition file containing all the symbols required by your application during packaging and then let the GCC compiler handle dynamically compilation of those symbols based on `#ifdef` logic.  

While Titanium prior to 1.3 has always used a full XCode project and the entire XCode toolchain is used for compiling, packaging and signing your application.  However, we believe this additional step adds additional benefits:  (a) we've had several larger shops that do work on behalf of their customers and they needed an easier way to transfer the project to them for final packaging and signing without sharing distribution certificates, (b) in rare cases, we've had issues with certain environments where we needed more flexible configurations of the project and this can only easily be done directly in XCode and (c) we think this provides even more evidence that we're in full compliance with Apple's recent Terms of Service changes.

As of the 1.3 release, this means you can directly build from within XCode (once you've created your project in Titanium Developer) or continue using Titanium Developer to build for you.  In either case, the build scripts have now been modified to be controlled directly from within XCode.

When building from XCode, make sure you set the proper configuration and target when doing a final build for release since Titanium does this for you when you run from inside Titanium Developer.  When building for release, make sure you set the appropriate SDK version, iPhone Device target and the `Release` configuration.

If you're using a third-party Titanium module, you should not have to do anything different in 1.3 than you did before.  Once you set the `<module>` configuration in your `tiapp.xml` file, Titanium will appropriately reconfigure your XCode project with the appropriate library and library path - whether you initiate your build from inside XCode or Titanium Developer.


#### Android

